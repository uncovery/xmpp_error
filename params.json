{"name":"Xmpp_error","tagline":"A lightweight PHP error reporting and tracking tool using XMPP/Jabber messages","body":"XMPP_ERROR\r\n==========\r\n\r\n#### Requirements: \r\n* JAXL: http://jaxl.readthedocs.org/en/latest/\r\n  This library will allow PHP to send XMPP/Jabber messages\r\n* 2 Jabber accounts: One for the sending PHP script (server), one for the \r\n  receiving user or admin (client)\r\n* A writable directory on your webserver where error reports are stored. Those\r\n  are attached to the XMPP messages since they are too large to be sent. For \r\n  security reasons, you can make this directory password protected via .htaccess\r\n\r\n#### Features:\r\n* Sending error messages of any level (error, warning, notice etc)\r\n* Excluding certain error types or files from generating a message\r\n* Tracking of functions and their arguments or variables throughout the script \r\n  to identify procedure paths taken and variable changes\r\n* Millisecond-timing of all steps\r\n* In-process errors from the start of the script until shutdown\r\n* XMPP status messages outside of error reports to the client\r\n* Multiple recipients for messages\r\n\r\n#### Installation:\r\n* Setup the required 2 XMPP accounts on your XMPP server, the server account \r\n  to send messages from PHP and the client account that received messages.\r\n* Setup an XMPP client to receive messages from the server XMPP account\r\n* Configure config.default.php as required\r\n* Rename config.default.php to config.php\r\n* Test the setup by running test.php . If you run this from the command line,\r\n  make sure you run it as a user that can write files to the \r\n  $XMPP_ERROR['config']['path'] folder. If successful, you should get 2 XMPP \r\n  messages with a timestamp: \r\n  * This is a test XMPP Message\r\n  * E_NOTICE: Undefined variable: test in line 16 of file /xmpp_error/test.php\r\n  This last message should have a link attached to a HTML file that contains the\r\n  $XMPP_ERROR error report with 3 elements\r\n* Include the file xmpp_error.php in your project, possibly at first with a line \r\n  such as \r\n  ```\r\n    require_once('/path/to/xmpp_error.php');\r\n  ```\r\n\r\n#### Usage:\r\n* After installation is complete, errors should generate reports in the\r\n  configured folder and send XMPP messages to the configured recipient\r\n* Further, as from the examples in test.php, one can include tracer calls at the \r\n  beginning of any function to include their names and arguments into the error \r\n  report. The \\_\\_FUNCTION\\_\\_ will set the current function name, and \r\n  func_get_args() will insert the arguments into the error report. \r\n  You can use the same function with any other arguments (preferably a \r\n  description for the first, and a variables for the second to insert a trace \r\n  for any variables in script.\r\n```php\r\n    function sample_function($a, $b, $c) {\r\n        XMPP_ERROR_trace(__FUNCTION__, func_get_args());\r\n    }\r\n```\r\n* Even further, one can trigger an error report on specific parts of the script.\r\n  This is specially helpful if certain conditions of the script should not be \r\n  met under any \"healthy\" conditions:\r\n```php\r\n    function sample_function2($value) {\r\n        if ($value == \"good_value_1\") {\r\n            // perform action\r\n        } else {\r\n            XMPP_ERROR_trigger(\"Value has unexpected contents: $value\");\r\n        }\r\n```\r\n* Simpler, one can trigger notifications to the admin for not-so-often occuring\r\n  actions to be aware about general activity of the project. This is not an\r\n  error report, but rather a status message.\r\n```php\r\n    function sample_function_user_registration() {\r\n        XMPP_ERROR_send_msg(\"A new user has registered on the site!\");\r\n    }\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}